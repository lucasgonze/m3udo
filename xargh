#!/usr/bin/perl -w

# xargh: shell command for Unix-like operating systems to build and execute
# command lines from standard input or a batch file.
#
# The original home of this code on the web was http://gonze.com/m3udo/latest
# Copyright c. 2003-2015 Lucas Gonze <lucas@gonze.com>
# MIT License

use strict;
use FileHandle;

sub escape_shell_metacharacters {
  my( $str ) = @_;

  @_ = $str;

  # this list of dangerous characters is far from exhaustive, but
  # ultimately the responsibility has to rest on the user to inspect
  # filenames before passing them to this script.
  s/([;<>\*\|`&\$!#\(\)\[\]\{\}:'"!# ])/\\$1/g;

  return $_;
}

# iterate over an m3u file
sub do_m3u {
  my ($m3u, $cmd) = @_;

  my $fh = new FileHandle;
  if(! $fh->open("< $m3u")) {
    print STDERR "Unable to open $m3u\n";
    return;
  }

  while (<$fh>) {

    # trim leading and trailing whitespace
    s/(^\s*)(.*)(\s*$)/$2/g;

    # trim trailing carriage return caused by windows-unix conversion
    s/(.*)(\r$)/$1/g;

    # skip comments
    if ( /^\#/ ) {
      next;
    }

    # skip blanks
    if ( ! length($_) ){
      next;
    }

    chomp();

    my $item = escape_shell_metacharacters($_);

    $_ = $cmd;
    if ( /(.*)(\{\})(.*)/ ) {

      # if {} exists in the command, replace it with the data line

      s/\{\}/$item/g;
      $cmd = $_;
    } else {
      # append line to command and run it
      $cmd = "$cmd $item";
    }

    system("$cmd");
  }

  $fh->close;

}

sub short_help(){
    print <<EOF;
Usage: xargh [switches] template-command [file(s)]

Build and execute command lines from stdin.

Use -h switch for long help.
EOF

}

sub long_help(){
  print <<EOF;

# xargh
  Shell command to build and execute command lines. Given a template
  command and a data file, merges each line of the file into the template
  and executes the combined string.

  In comparison to xargs, you should find xargh easier. In comparison
  to "for" loops in the shell or hand-rolled one-liners, you should
  find xargh is faster.

## Usage

  xargh [switches] [command] [file(s)]

  Example
    > \$ echo "Hello" | xargh "echo {} World"
    > Hello World

  Switches
    "-h" or "--help" show help.

  Command
    A template of a shell command. Each line in the data file will
    be concatenated, and the combined string executed. If the template
    contains {}, the data will be inserted at that position instead of
    appended.

    This allows you to merge a data line into a command somewhere
    other than at the end.

  File argument(s)
    * STDIN is assumed to be a data file.
    * Any arguments after the command are assumed to be names of
      additional data files.
    * A file named "-" is treated as standard input.
    * Before passing a line to a command, whitespace at either end and
      DOS-fuxored carriage returns are trimmed.
    * A line in the data file beginning with "#" is considered a comment and
      is skipped.

## Installation
  npm install -g xargh

  If perl is not installed in /usr/bin/perl on your system, you will need
  to change the first line of the script from #!/usr/bin/perl to
  #!/usr/local/bin/perl or wherever your perl is installed.

## Contact
  mailto lucas at gonze.com
  https://github.com/lucasgonze/xargh
  c. 2003-2015 Lucas Gonze
  MIT license

EOF

}

# ****************
# * MAIN
# ****************

# no arguments at all
if( ($#ARGV + 1) == 0){
  short_help();
  exit 0;
}

# asked for help
if( $ARGV[0] eq "-h"
    || $ARGV[0] eq "-help"
    || $ARGV[0] eq "--help"
){
  long_help();
  exit 0;
}

if( $ARGV[0] eq "-r" ){
  shift();
  if( $#ARGV < 0){
    print STDERR "Missing parameter for -r. Read -h for more info.\n";
    exit 1;
  }
  my $needle = shift();
}

if( $#ARGV < 0){
  print STDERR "Missing template-command. Read -h for more info.\n";
  exit 1;
}

# the first argument is always the command string
my $cmd = shift();

# if there's anything on stdin, handle it
do_m3u("-",$cmd);

# if there are files named, handle them too
while( $#ARGV > -1 ){
  my $arg = shift();
  do_m3u($arg,$cmd);
}
